# THIS SCRIPT WAS GENERATED BY CHATGPT

import os
import subprocess
import time
import statistics

def measure_execution_time(binary_path, runs=10):
    """Measures the execution time of a binary and logs the output."""
    times = []
    outputs = []
    for i in range(runs):
        start_time = time.time()
        result = subprocess.run(binary_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        end_time = time.time()
        times.append(end_time - start_time)
        outputs.append((result.stdout.decode('utf-8'), result.stderr.decode('utf-8')))
    return times, outputs

def analyze_times(times):
    """Calculates average and standard deviation of a list of times."""
    average = statistics.mean(times)
    stddev = statistics.stdev(times)
    return average, stddev

def log_output(binary_name, outputs, run_id, log_dir):
    """Logs the output of each run to a file in the specified log directory."""
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    log_file_path = os.path.join(log_dir, f"{binary_name}_run_{run_id}.log")
    with open(log_file_path, 'w') as log_file:
        for i, (stdout, stderr) in enumerate(outputs):
            log_file.write(f"Run {i+1}:\n")
            log_file.write("STDOUT:\n")
            log_file.write(stdout)
            log_file.write("\nSTDERR:\n")
            log_file.write(stderr)
            log_file.write("\n" + "="*40 + "\n")
    print(f"Output logged to {log_file_path}")

def write_latex_table(results1, results2, output_file):
    """Writes the results to a LaTeX formatted table."""
    # Remove prefixes for sorting and sorting both results
    sorted_results1 = sorted(results1, key=lambda x: x[0].replace("test-", ""))
    sorted_results2 = sorted(results2, key=lambda x: x[0].replace("clang-test-", ""))
    
    with open(output_file, 'w') as f:
        f.write("\\begin{table}[h!]\n")
        f.write("\\centering\n")
        f.write("\\begin{tabular}{|c|c|c|c|c|}\n")
        f.write("\\hline\n")
        f.write("Benchmark & Average Time 1 (s) & Std Dev 1 (s) & Average Time 2 (s) & Std Dev 2 (s) \\\\\n")
        f.write("\\hline\n")
        
        for (binary_name1, avg1, std1), (binary_name2, avg2, std2) in zip(sorted_results1, sorted_results2):
            # Ensure the benchmark names are the same after removing their respective prefixes
            benchmark_name1 = binary_name1.replace("test-", "")
            benchmark_name2 = binary_name2.replace("clang-test-", "")
            if benchmark_name1 != benchmark_name2:
                raise ValueError(f"Benchmark names do not match: {benchmark_name1} vs {benchmark_name2}")
            f.write(f"{benchmark_name1} & {avg1:.4f} & {std1:.4f} & {avg2:.4f} & {std2:.4f} \\\\\n")
        
        f.write("\\hline\n")
        f.write("\\end{tabular}\n")
        f.write("\\caption{Execution Time Statistics for Two Compiled Binaries}\n")
        f.write("\\label{tab:exec_time_stats}\n")
        f.write("\\end{table}\n")

def main(folder_path1, folder_path2, runs=10):
    log_dir1 = "logs/folder1"
    log_dir2 = "logs/folder2"
    latex_output_file = "execution_times.tex"
    results1 = []
    results2 = []

    # Measure execution times for binaries in the first folder
    for binary_name in os.listdir(folder_path1):
        binary_path = os.path.join(folder_path1, binary_name)
        if os.path.isfile(binary_path) and os.access(binary_path, os.X_OK):
            print(f"Measuring execution time for: {binary_name} in folder 1")
            times, outputs = measure_execution_time(binary_path, runs)
            average, stddev = analyze_times(times)
            results1.append((binary_name, average, stddev))
            log_output(binary_name, outputs, runs, log_dir1)
            print(f"Average Time: {average:.4f} seconds, Standard Deviation: {stddev:.4f} seconds\n")

    # Measure execution times for binaries in the second folder
    for binary_name in os.listdir(folder_path2):
        binary_path = os.path.join(folder_path2, binary_name)
        if os.path.isfile(binary_path) and os.access(binary_path, os.X_OK):
            print(f"Measuring execution time for: {binary_name} in folder 2")
            times, outputs = measure_execution_time(binary_path, runs)
            average, stddev = analyze_times(times)
            results2.append((binary_name, average, stddev))
            log_output(binary_name, outputs, runs, log_dir2)
            print(f"Average Time: {average:.4f} seconds, Standard Deviation: {stddev:.4f} seconds\n")

    # Ensure both folders have the same set of binaries after removing their respective prefixes
    binary_names1 = {x[0].replace("test-", "") for x in results1}
    binary_names2 = {x[0].replace("clang-test-", "") for x in results2}
    if binary_names1 != binary_names2:
        raise ValueError("Both folders must contain the same set of binaries.")

    write_latex_table(results1, results2, latex_output_file)
    print(f"LaTeX table written to {latex_output_file}")

if __name__ == "__main__":
    folder_path1 = "compiled-tests/threadlib"  # Update this path to your first folder containing binaries
    folder_path2 = "compiled-tests/clang"  # Update this path to your second folder containing binaries
    runs = 10
    main(folder_path1, folder_path2, runs)

